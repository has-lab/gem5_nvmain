################################################################
# Initialize bits and sse macros
################################################################
%ifdef %{x64}
%define bits 64
%else
%define bits 32
%endif
%ifndef %{sse}
%define sse
%define nosse
%endif

################################################################
# SPEC CPU2006 Intel Linux64 config file
# Aug 2011 Intel Compiler 12.1 for Linux64
################################################################
action      = validate
tune        = base,peak
ext         = cpu2006.1.2.ic12.1.5.linux%{bits}.cloudharmony%{sse}
flagsurl=$[top]/config/flags/Intel-ic12.1-official-linux64.20120425.xml
PATHSEP     = /
check_md5=1
reportable=1
bench_post_setup=sync
parallel_test=0
mean_anyway=1
%ifdef %{output_root}
output_root=%{output_root}
%endif

# Set some environment variables
preENV_LD_LIBRARY_PATH = $[top]/libs/32:$[top]/libs/64
%if defined(%{cpu_vendor}) && %{cpu_vendor} eq "GenuineIntel"
preENV_KMP_AFFINITY = granularity=fine,scatter 
%ifdef %{cpu_count}
preENV_OMP_NUM_THREADS = ${cpu_count}
%endif
%endif

#
# These are listed as benchmark-tuning-extension-machine
#

int=default=default=default:
CC=  icc  -m%{bits}
CXX= icpc -m%{bits}
OBJ = .o

fp=default=default=default:
CC=  icc   -m%{bits}
CXX= icpc  -m%{bits}
FC=  ifort -m%{bits}
OBJ = .o


# For UP systems, we need to know if the processors are ordered across cores first or in order
# If across cores, processors 0, 1, 2 and 3 are on distinct physical cores
# Otherwise, processors 0, 2, 4 and 6 are on distinct physical cores 

default:
%ifdef %{numa}
submit       = numactl --localalloc --physcpubind=$SPECCOPYNUM $command
%else
submit       = taskset -c $SPECCOPYNUM $command
%endif

# mean_anyway option
%ifdef %{mean_anyway}
mean_anyway  = 1
%endif


################################################################
# Compiler options
################################################################
default:
%ifndef %{nosse}
SSE= -x%{sse}
%endif
FASTNOSTATIC =  $(SSE) -ipo -O3 -no-prec-div
FAST =  $(SSE) -ipo -O3 -no-prec-div -static


################################################################
# portability & libraries
################################################################
default:
%if %{bits} == 64
PORTABILITY = -DSPEC_CPU_LP64
%endif

400.perlbench=default:
%if %{bits} == 64
CPORTABILITY  = -DSPEC_CPU_LINUX_X64
%else
CPORTABILITY  = -DSPEC_CPU_LINUX_IA32
%endif

403.gcc=default:
EXTRA_CFLAGS=      -Dalloca=_alloca

462.libquantum=default:
CPORTABILITY=      -DSPEC_CPU_LINUX

483.xalancbmk=default:
CXXPORTABILITY=    -DSPEC_CPU_LINUX

%if %{bits} == 64
fp=default:
PORTABILITY = -DSPEC_CPU_LP64
%endif

435.gromacs=default=default=default:
LDPORTABILITY = -nofor_main

436.cactusADM=default=default=default:
LDPORTABILITY = -nofor_main

454.calculix=default=default=default:
LDPORTABILITY = -nofor_main

481.wrf=default=default=default:
CPORTABILITY = -DSPEC_CPU_CASE_FLAG -DSPEC_CPU_LINUX


################################################################
# Base Tuning Flags
################################################################
#
# Base tuning default optimization
# Feedback directed optimization not allowed in baseline for CPU2006
# However there is no limit on the number of flags as long as the same 
# flags are used in the same order for all benchmarks of a given language

int=base=default=default:
COPTIMIZE=    $(FASTNOSTATIC)  -opt-prefetch 
CXXOPTIMIZE=  $(FASTNOSTATIC)  -opt-prefetch  

fp=base=default=default:
OPTIMIZE=     $(FAST) -opt-prefetch 
COPTIMIZE=    -auto-p32 -ansi-alias
%if %{bits} == 64
CXXOPTIMIZE=  -auto-p32 -ansi-alias
%else
CXXOPTIMIZE=  -auto-p32
%endif


################################################################
# Peak Tuning Flags int 2006 fast
################################################################
int=peak=default:
COPTIMIZE=         -ansi-alias 
CXXOPTIMIZE=       -ansi-alias  
PASS1_CFLAGS     = -prof-gen
PASS2_CFLAGS     = $(FASTNOSTATIC) -prof-use
PASS1_CXXFLAGS   = -prof-gen
PASS2_CXXFLAGS   = $(FASTNOSTATIC) -prof-use
PASS1_LDCFLAGS   = -prof-gen
PASS2_LDCFLAGS   = $(FASTNOSTATIC) -prof-use
PASS1_LDCXXFLAGS = -prof-gen
PASS2_LDCXXFLAGS = $(FASTNOSTATIC) -prof-use

400.perlbench=peak=default:
CC= icc -m%{bits}
%if %{bits} == 64
CPORTABILITY  = -DSPEC_CPU_LP64 -DSPEC_CPU_LINUX_X64
%else
CPORTABILITY  = -DSPEC_CPU_LINUX_IA32
%endif
COPTIMIZE= -auto-ilp32 

401.bzip2=peak=default:
CC= icc -m%{bits}
%if %{bits} == 64
CPORTABILITY  = -DSPEC_CPU_LP64
%else
CPORTABILITY  = -DSPEC_CPU_LINUX_IA32
%endif
COPTIMIZE= -opt-prefetch  -auto-ilp32 -ansi-alias

403.gcc=peak=default:
COPTIMIZE = $(FASTNOSTATIC) 
feedback=0

429.mcf=peak=default:
basepeak=yes

445.gobmk=peak=default:
PASS1_CFLAGS     = -prof-gen
PASS2_CFLAGS     = $(SSE) -prof-use
PASS1_LDCFLAGS   = -prof-gen
PASS2_LDCFLAGS   = $(SSE) -prof-use

456.hmmer=peak=default:
CC= icc -m%{bits}
%if %{bits} == 64
CPORTABILITY  = -DSPEC_CPU_LP64
%else
CPORTABILITY  = -DSPEC_CPU_LINUX_IA32
%endif
COPTIMIZE=  $(FASTNOSTATIC) -unroll2  -auto-ilp32
feedback=no

458.sjeng=peak=default:
CC= icc -m%{bits}
%if %{bits} == 64
CPORTABILITY  = -DSPEC_CPU_LP64
%else
CPORTABILITY  = -DSPEC_CPU_LINUX_IA32
%endif
COPTIMIZE= -unroll4 -auto-ilp32

462.libquantum=peak=default:
basepeak=yes

464.h264ref=peak=default:
COPTIMIZE=  -unroll2 -ansi-alias 

471.omnetpp=peak=default:
CXXOPTIMIZE=  -ansi-alias -opt-ra-region-strategy=block

473.astar=peak=default:
basepeak=yes

483.xalancbmk=peak=default:
basepeak=yes

################################################################
# Peak Tuning Flags for FP
################################################################
fp=peak=default:
COPTIMIZE=       -auto-ilp32 
CXXOPTIMIZE=     -auto-ilp32 
PASS1_CFLAGS =   -prof-gen
PASS2_CFLAGS =   $(FASTNOSTATIC)  -prof-use
PASS1_CXXFLAGS = -prof-gen
PASS2_CXXFLAGS = $(FASTNOSTATIC)  -prof-use
PASS1_FFLAGS =   -prof-gen
PASS2_FFLAGS =   $(FASTNOSTATIC)                         -prof-use
PASS1_LDFLAGS =  -prof-gen
PASS2_LDFLAGS =  $(FASTNOSTATIC)                         -prof-use

410.bwaves=peak=default:
basepeak=yes

416.gamess=peak=default:
OPTIMIZE= -unroll2 -inline-level=0  -scalar-rep- -static

433.milc=peak=default:
OPTIMIZE= -static

434.zeusmp=peak=default:
basepeak=yes
feedback=0

435.gromacs=peak=default:
OPTIMIZE= -opt-prefetch -static

436.cactusADM=peak=default:
basepeak=yes

437.leslie3d=peak=default:
OPTIMIZE=     $(FAST) -opt-prefetch
feedback=no

444.namd=peak=default:
CXXOPTIMIZE= -fno-alias -auto-ilp32

447.dealII=peak=default:
basepeak=yes

450.soplex=peak=default:
PORTABILITY =
CXX= icpc -m%{bits} 
OPTIMIZE= -opt-malloc-options=3
CXXOPTIMIZE=

453.povray=peak=default:
CXXOPTIMIZE= -unroll4  -ansi-alias 

454.calculix=peak=default:
basepeak=yes

459.GemsFDTD=peak=default:
basepeak=yes

465.tonto=peak=default:
OPTIMIZE= -unroll4 -auto -inline-calloc -opt-malloc-options=3

470.lbm=peak=default:
basepeak=yes

481.wrf=peak=default:
OPTIMIZE=     $(FAST) 
feedback=0

482.sphinx3=peak=default:
PORTABILITY=
CC= icc -m%{bits} 
OPTIMIZE= $(FASTNOSTATIC) 
COPTIMIZE= -unroll2
feedback=no


#################################################################
# (Edit this to match your system)
#################################################################
# default sysinfo is expected to write hw_cpu_name, hw_memory, 
# hw_nchips, hw_disk, prepared_by, sw_os, sw_file, sw_state

default=default=default=default:
%ifdef %{meta_license_num}
license_num      = %{meta_license_num}
%endif
%ifdef %{meta_test_sponsor}
test_sponsor     = %{meta_test_sponsor}
%endif
%ifdef %{meta_hw_avail}
hw_avail         = %{meta_hw_avail}
%endif
%ifdef %{meta_hw_fpu}
hw_fpu         = %{meta_hw_fpu}
%endif
%ifdef %{meta_sw_avail}
sw_avail         = %{meta_sw_avail}
%endif
%ifdef %{meta_tester}
tester           = %{meta_tester}
%endif
%ifdef %{cpu_name}
hw_cpu_char      = %{cpu_name}
%endif
%ifdef %{cpu_speed}
hw_cpu_mhz       = %{cpu_speed}
%endif
%ifdef %{instance_id}
hw_model         = %{instance_id}
%endif
%ifdef %{cpu_count}
hw_ncores        = %{cpu_count}
%endif
%ifdef %{cpu_count}
hw_ncoresperchip = 1
%endif
%ifdef %{meta_hw_ncpuorder}
hw_ncpuorder = %{meta_hw_ncpuorder}
%endif
%ifdef %{meta_hw_nthreadspercore}
hw_nthreadspercore = %{meta_hw_nthreadspercore}
%else
hw_nthreadspercore = 1
%endif
%ifdef %{meta_hw_other}
hw_other         = %{meta_hw_other}
%endif
%ifdef %{meta_hw_pcache}
hw_pcache        = %{meta_hw_pcache}
%endif
%ifdef %{cpu_cache}
hw_scache        = %{cpu_cache}
%endif
%ifdef %{meta_hw_tcache}
hw_tcache        = %{meta_hw_tcache}
%endif
%ifdef %{meta_hw_ocache}
hw_ocache        = %{meta_hw_ocache}
%endif
%ifdef %{provider_id}
hw_vendor        = %{provider_id}
%endif
%ifdef %{meta_sw_other}
sw_other         = %{meta_sw_other}
%endif

%ifdef %{meta_notes_1}
notes_001   = %{meta_notes_1}
%endif
%ifdef %{meta_notes_2}
notes_002   = %{meta_notes_2}
%endif
%ifdef %{meta_notes_3}
notes_003   = %{meta_notes_3}
%endif
%ifdef %{meta_notes_4}
notes_004   = %{meta_notes_4}
%endif
%ifdef %{meta_notes_5}
notes_005   = %{meta_notes_5}
%endif

%ifdef %{meta_notes_base_1}
notes_base_001   = %{meta_notes_base_1}
%endif
%ifdef %{meta_notes_base_2}
notes_base_002   = %{meta_notes_base_2}
%endif
%ifdef %{meta_notes_base_3}
notes_base_003   = %{meta_notes_base_3}
%endif
%ifdef %{meta_notes_base_4}
notes_base_004   = %{meta_notes_base_4}
%endif
%ifdef %{meta_notes_base_5}
notes_base_005   = %{meta_notes_base_5}
%endif

%ifdef %{meta_notes_comp_1}
notes_comp_001   = %{meta_notes_comp_1}
%endif
%ifdef %{meta_notes_comp_2}
notes_comp_002   = %{meta_notes_comp_2}
%endif
%ifdef %{meta_notes_comp_3}
notes_comp_003   = %{meta_notes_comp_3}
%endif
%ifdef %{meta_notes_comp_4}
notes_comp_004   = %{meta_notes_comp_4}
%endif
%ifdef %{meta_notes_comp_5}
notes_comp_005   = %{meta_notes_comp_5}
%endif

%ifdef %{meta_notes_os_1}
notes_os_001   = %{meta_notes_os_1}
%endif
%ifdef %{meta_notes_os_2}
notes_os_002   = %{meta_notes_os_2}
%endif
%ifdef %{meta_notes_os_3}
notes_os_003   = %{meta_notes_os_3}
%endif
%ifdef %{meta_notes_os_4}
notes_os_004   = %{meta_notes_os_4}
%endif
%ifdef %{meta_notes_os_5}
notes_os_005   = %{meta_notes_os_5}
%endif

%ifdef %{meta_notes_part_1}
notes_part_001   = %{meta_notes_part_1}
%endif
%ifdef %{meta_notes_part_2}
notes_part_002   = %{meta_notes_part_2}
%endif
%ifdef %{meta_notes_part_3}
notes_part_003   = %{meta_notes_part_3}
%endif
%ifdef %{meta_notes_part_4}
notes_part_004   = %{meta_notes_part_4}
%endif
%ifdef %{meta_notes_part_5}
notes_part_005   = %{meta_notes_part_5}
%endif

%ifdef %{meta_notes_peak_1}
notes_peak_001   = %{meta_notes_peak_1}
%endif
%ifdef %{meta_notes_peak_2}
notes_peak_002   = %{meta_notes_peak_2}
%endif
%ifdef %{meta_notes_peak_3}
notes_peak_003   = %{meta_notes_peak_3}
%endif
%ifdef %{meta_notes_peak_4}
notes_peak_004   = %{meta_notes_peak_4}
%endif
%ifdef %{meta_notes_peak_5}
notes_peak_005   = %{meta_notes_peak_5}
%endif

%ifdef %{meta_notes_plat_1}
notes_plat_001   = %{meta_notes_plat_1}
%endif
%ifdef %{meta_notes_plat_2}
notes_plat_002   = %{meta_notes_plat_2}
%endif
%ifdef %{meta_notes_plat_3}
notes_plat_003   = %{meta_notes_plat_3}
%endif
%ifdef %{meta_notes_plat_4}
notes_plat_004   = %{meta_notes_plat_4}
%endif
%ifdef %{meta_notes_plat_5}
notes_plat_005   = %{meta_notes_plat_5}
%endif

%ifdef %{meta_notes_port_1}
notes_port_001   = %{meta_notes_port_1}
%endif
%ifdef %{meta_notes_port_2}
notes_port_002   = %{meta_notes_port_2}
%endif
%ifdef %{meta_notes_port_3}
notes_port_003   = %{meta_notes_port_3}
%endif
%ifdef %{meta_notes_port_4}
notes_port_004   = %{meta_notes_port_4}
%endif
%ifdef %{meta_notes_port_5}
notes_port_005   = %{meta_notes_port_5}
%endif

%ifdef %{meta_notes_submit_1}
notes_submit_001   = %{meta_notes_submit_1}
%endif
%ifdef %{meta_notes_submit_2}
notes_submit_002   = %{meta_notes_submit_2}
%endif
%ifdef %{meta_notes_submit_3}
notes_submit_003   = %{meta_notes_submit_3}
%endif
%ifdef %{meta_notes_submit_4}
notes_submit_004   = %{meta_notes_submit_4}
%endif
%ifdef %{meta_notes_submit_5}
notes_submit_005   = %{meta_notes_submit_5}
%endif


int=default=default=default:
sw_compiler001   = Intel C++ Compiler for Linux version 12.1.5
sw_compiler002   = Intel Parallel Studio XE 2011 SP1 Update 3

fp=default=default=default:
sw_compiler001   = Intel C++ Compiler for Linux version 12.1.5
sw_compiler002   = Intel Parallel Studio XE 2011 SP1 Update 3
sw_compiler003   = Intel Fortran Compiler for Linux version 12.1.5
sw_compiler004   = Intel Parallel Studio XE 2011 SP1 Update 3
